{"version":3,"sources":["components/Paragraph.jsx","components/InputField.jsx","App.js","serviceWorker.js","index.js"],"names":["style","beforeCursor","color","currentWord","beforePos","textDecoration","error","para","padding","Paragraph","_ref","afterCursor","position","errorLength","react_default","a","createElement","className","substr","InputField","term","handleInput","disabled","index_es","width","value","onChange","margin","variant","autoFocus","placeholder","initialState","runningTime","timeInMinutes","timerOn","typingFinished","App","state","text","splitSentence","sentence","indexOf","event","_this$state","_this","target","lastChar","slice","handleTime","startsWith","length","updateValues","setState","trim","_this$state2","_this$splitSentence","_this$splitSentence2","Object","slicedToArray","before","after","_this$state3","clearInterval","timer","setInterval","handleReset","_this$splitSentence3","_this$splitSentence4","data","assign","objectSpread","handlePause","_this2","this","fetch","then","resp","json","text_out","replace","_this2$splitSentence","_this2$splitSentence2","catch","_this$state4","remainingTime","wpm","typedWordsLength","split","minutes","parseInt","seconds","container","marginTop","textAlign","item","xs","md","lg","components_Paragraph","components_InputField","backgroundColor","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57d898b8.chunk.js","sourcesContent":["import React from 'react';\nimport './../App.css';\n\nconst style = {\n  beforeCursor: {\n    color: 'orange'\n  },\n  currentWord: {\n    color: 'green'\n  },\n\n  beforePos: {\n    color: 'green',\n    textDecoration: 'underline  blue'\n  },\n  error: {\n    color: 'red'\n  },\n  para: {\n    padding: 20\n  }\n};\n\nconst Paragraph = ({\n  currentWord,\n  beforeCursor,\n  afterCursor,\n  position,\n  errorLength\n}) => {\n  return (\n    <div className={'Disable'} style={style.para}>\n      <span style={style.beforeCursor}>{beforeCursor}</span>\n      <span style={style.beforePos} className={'Caret'}>\n        {currentWord.substr(0, position)}\n      </span>\n      <span style={style.error}>\n        {currentWord.substr(position, errorLength)}\n      </span>\n      <span style={style.currentWord}>\n        {currentWord.substr(position + errorLength)}\n      </span>\n      <span>{afterCursor}</span>\n    </div>\n  );\n};\n\nexport default Paragraph;\n","import React from 'react';\nimport { TextField } from '@material-ui/core';\n\nconst InputField = ({ term, handleInput, disabled, error, currentWord }) => {\n  return (\n    <TextField\n      style={{ width: 350 }}\n      value={term}\n      onChange={handleInput}\n      margin=\"normal\"\n      variant=\"outlined\"\n      disabled={disabled}\n      error={error}\n      autoFocus\n      placeholder={'Start typing to see your speed'}\n    />\n  );\n};\n\nexport default InputField;\n","import React, { Component } from 'react';\nimport { Paper, Button, Grid } from '@material-ui/core';\n\nimport Paragraph from './components/Paragraph';\nimport InputField from './components/InputField';\n\nconst timeInMinutes = 5;\nconst initialState = {\n  term: '',\n  currentWord: '',\n  beforeCursor: '',\n  afterCursor: '',\n  position: 0,\n  errorLength: 0,\n  runningTime: timeInMinutes * 60,\n  timerOn: false,\n  typingFinished: false,\n  error: false\n};\nclass App extends Component {\n  state = {\n    text: '',\n    ...initialState\n  };\n\n  componentDidMount() {\n    fetch('https://www.randomtext.me/api/')\n      .then(resp => resp.json())\n      .then(data =>\n        this.setState(\n          { text: data.text_out.replace(/<(.|\\n)*?>/g, '') },\n          () => {\n            const [before, after] = this.splitSentence(this.state.text, ' ');\n            this.setState({ currentWord: before, afterCursor: after });\n          }\n        )\n      )\n      .catch(() => this.setState({ error: true }));\n  }\n\n  splitSentence = (sentence, term) => {\n    const position = sentence.indexOf(term);\n    if (position < 0) return [sentence, ''];\n    const before = sentence.substr(0, position);\n    const after = sentence.substr(position + 1);\n    return [before, after];\n  };\n\n  handleInput = event => {\n    let {\n      currentWord,\n      afterCursor,\n      position,\n      errorLength,\n      timerOn\n    } = this.state;\n    const term = event.target.value;\n    const lastChar = term.slice(-1);\n    if (!timerOn) this.handleTime();\n    if (currentWord.startsWith(term)) {\n      position = term.length;\n      errorLength = 0;\n    } else {\n      errorLength = term.length - position;\n    }\n    if (afterCursor === '' && lastChar === currentWord.slice(-1)) {\n      this.updateValues();\n      this.handleTime();\n      this.setState({ typingFinished: true });\n    }\n    if (errorLength > 5) return;\n    if (lastChar === ' ' && term.trim() === currentWord) this.updateValues();\n    else this.setState({ term, position, errorLength });\n  };\n\n  updateValues = () => {\n    let { afterCursor, beforeCursor, currentWord } = this.state;\n    const [before, after] = this.splitSentence(afterCursor, ' ');\n    this.setState({\n      afterCursor: after,\n      beforeCursor: beforeCursor + ' ' + currentWord,\n      currentWord: before,\n      term: '',\n      position: 0,\n      errorLength: 0\n    });\n  };\n\n  handleTime = () => {\n    let { timerOn, runningTime } = this.state;\n    if (timerOn) {\n      clearInterval(this.timer);\n    } else {\n      this.timer = setInterval(() => {\n        this.setState({ runningTime: --runningTime });\n      }, 1000);\n    }\n    this.setState({ timerOn: !timerOn });\n  };\n\n  handleReset = () => {\n    clearInterval(this.timer);\n    const { text } = this.state;\n    const [before, after] = this.splitSentence(text, ' ');\n    const data = Object.assign(initialState, {\n      currentWord: before,\n      afterCursor: after\n    });\n    this.setState({ ...data });\n  };\n\n  handlePause = () => {\n    const { typingFinished } = this.state;\n    this.handleTime();\n    this.setState({ typingFinished: !typingFinished });\n  };\n\n  render() {\n    const {\n      currentWord,\n      term,\n      beforeCursor,\n      afterCursor,\n      errorLength,\n      position,\n      runningTime,\n      typingFinished,\n      timerOn,\n      error\n    } = this.state;\n    if (error) return <p>Somethings Wrong</p>;\n    const remainingTime = (timeInMinutes * 60 - runningTime) / 60;\n    let wpm = 0;\n    const typedWordsLength = beforeCursor.split(' ').length - 1;\n    const minutes = parseInt(runningTime / 60, 10);\n    const seconds = parseInt(runningTime % 60, 10);\n    if (typedWordsLength === 0) wpm = 0;\n    else wpm = parseInt(typedWordsLength / remainingTime);\n    return (\n      <Grid container style={{ marginTop: 30, textAlign: 'center' }}>\n        <Grid item xs={12} md={12} lg={8} style={{ margin: '0 auto' }}>\n          <h1>TYPE RACER</h1>\n          <Paper>\n            <Paragraph\n              currentWord={currentWord + ' '}\n              beforeCursor={beforeCursor + ' '}\n              afterCursor={afterCursor}\n              errorLength={errorLength}\n              position={position}\n            />\n            <div>\n              {typingFinished && <p>You finished the race</p>}\n              <p>\n                {minutes}:{seconds} minutes\n              </p>\n              <p>{wpm} wpm</p>\n            </div>\n            <div>\n              <InputField\n                error={errorLength > 0}\n                disabled={typingFinished}\n                term={term}\n                handleInput={this.handleInput}\n              />\n              {errorLength > 0 && <p style={{ color: 'red' }}>TYPO</p>}\n            </div>\n            {(timerOn || typingFinished) && (\n              <Button\n                style={{\n                  backgroundColor: '#e10050',\n                  color: '#fff',\n                  margin: '20px 0px'\n                }}\n                onClick={this.handleReset}\n              >\n                Reset\n              </Button>\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}